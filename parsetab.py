
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOLDCL BOOLVAL BOOLVAL EQUALS FLOATDCL FNUMBER GREATER GREATEREQUALS IF INTDCL INUMBER LESS LESSEQUALS NAME NOTEQUALS OR PRINTprog : stmtsstmts : statement stmts\n             | statement statement : INTDCL NAME ";"\n                 | INTDCL NAME "=" numexp ";"statement : FLOATDCL NAME ";"\n                 | FLOATDCL NAME "=" numexp ";"statement : BOOLDCL NAME ";"\n                 | BOOLDCL NAME "=" boolexp ";"statement : PRINT expression ";"statement : IF "(" boolexp ")" "{" stmts "}"statement : NAME "=" expression ";"expression : \'(\' expression \')\'numexp : numexp \'+\' numexp\n              | numexp \'-\' numexp\n              | numexp \'*\' numexp\n              | numexp \'/\' numexp\n              | numexp \'^\' numexpexpression : numexpnumexp : INUMBERnumexp : FNUMBERexpression : boolexpboolexp : \'(\' boolexp \')\'\n               | boolexp AND boolexp\n               | boolexp OR boolexp\n               | compexp\n               | BOOLVAL\n               | NAME compexp : boolexp EQUALS boolexp\n               | boolexp NOTEQUALS boolexp\n               | numexp EQUALS numexp\n               | numexp NOTEQUALS numexp\n               | numexp GREATER numexp\n               | numexp LESS numexp\n               | numexp LESSEQUALS numexp\n               | numexp GREATEREQUALS numexpexpression : NAME'
    
_lr_action_items = {'INTDCL':([0,3,25,28,30,32,55,77,78,79,80,82,],[4,4,-4,-6,-8,-10,-12,-5,-7,-9,4,-11,]),'FLOATDCL':([0,3,25,28,30,32,55,77,78,79,80,82,],[6,6,-4,-6,-8,-10,-12,-5,-7,-9,6,-11,]),'BOOLDCL':([0,3,25,28,30,32,55,77,78,79,80,82,],[7,7,-4,-6,-8,-10,-12,-5,-7,-9,7,-11,]),'PRINT':([0,3,25,28,30,32,55,77,78,79,80,82,],[8,8,-4,-6,-8,-10,-12,-5,-7,-9,8,-11,]),'IF':([0,3,25,28,30,32,55,77,78,79,80,82,],[9,9,-4,-6,-8,-10,-12,-5,-7,-9,9,-11,]),'NAME':([0,3,4,6,7,8,12,16,24,25,28,30,31,32,46,47,48,49,50,55,77,78,79,80,82,],[5,5,11,13,14,19,19,19,52,-4,-6,-8,52,-10,52,52,52,52,52,-12,-5,-7,-9,5,-11,]),'$end':([1,2,3,10,25,28,30,32,55,77,78,79,82,],[0,-1,-3,-2,-4,-6,-8,-10,-12,-5,-7,-9,-11,]),'}':([3,10,25,28,30,32,55,77,78,79,81,82,],[-3,-2,-4,-6,-8,-10,-12,-5,-7,-9,82,-11,]),'=':([5,11,13,14,],[12,26,29,31,]),'(':([8,9,12,16,24,31,46,47,48,49,50,],[16,24,16,16,50,50,50,50,50,50,50,]),'INUMBER':([8,12,16,24,26,29,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FNUMBER':([8,12,16,24,26,29,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'BOOLVAL':([8,12,16,24,31,46,47,48,49,50,],[23,23,23,23,23,23,23,23,23,23,]),';':([11,13,14,15,17,18,19,20,21,22,23,27,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,],[25,28,30,32,-19,-22,-28,-20,-21,-26,-27,55,-28,77,78,79,-13,-23,-14,-15,-16,-17,-18,-31,-32,-33,-34,-35,-36,-24,-25,-29,-30,]),')':([17,19,20,21,22,23,33,34,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[-19,-28,-20,-21,-26,-27,58,59,76,-28,-13,-23,-14,-15,-16,-17,-18,-31,-32,-33,-34,-35,-36,-24,-25,-29,-30,59,]),'+':([17,20,21,53,54,56,60,61,62,63,64,65,66,67,68,69,70,],[35,-20,-21,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'-':([17,20,21,53,54,56,60,61,62,63,64,65,66,67,68,69,70,],[36,-20,-21,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'*':([17,20,21,53,54,56,60,61,62,63,64,65,66,67,68,69,70,],[37,-20,-21,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'/':([17,20,21,53,54,56,60,61,62,63,64,65,66,67,68,69,70,],[38,-20,-21,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'^':([17,20,21,53,54,56,60,61,62,63,64,65,66,67,68,69,70,],[39,-20,-21,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'EQUALS':([17,18,19,20,21,22,23,34,51,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[40,48,-28,-20,-21,-26,-27,48,48,-28,40,48,-23,-14,-15,-16,-17,-18,-31,-32,-33,-34,-35,-36,48,48,48,48,48,]),'NOTEQUALS':([17,18,19,20,21,22,23,34,51,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[41,49,-28,-20,-21,-26,-27,49,49,-28,41,49,-23,-14,-15,-16,-17,-18,-31,-32,-33,-34,-35,-36,49,49,49,49,49,]),'GREATER':([17,20,21,53,60,61,62,63,64,],[42,-20,-21,42,-14,-15,-16,-17,-18,]),'LESS':([17,20,21,53,60,61,62,63,64,],[43,-20,-21,43,-14,-15,-16,-17,-18,]),'LESSEQUALS':([17,20,21,53,60,61,62,63,64,],[44,-20,-21,44,-14,-15,-16,-17,-18,]),'GREATEREQUALS':([17,20,21,53,60,61,62,63,64,],[45,-20,-21,45,-14,-15,-16,-17,-18,]),'AND':([18,19,20,21,22,23,34,51,52,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[46,-28,-20,-21,-26,-27,46,46,-28,46,-23,-14,-15,-16,-17,-18,-31,-32,-33,-34,-35,-36,46,46,46,46,46,]),'OR':([18,19,20,21,22,23,34,51,52,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[47,-28,-20,-21,-26,-27,47,47,-28,47,-23,-14,-15,-16,-17,-18,-31,-32,-33,-34,-35,-36,47,47,47,47,47,]),'{':([76,],[80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'stmts':([0,3,80,],[2,10,81,]),'statement':([0,3,80,],[3,3,3,]),'expression':([8,12,16,],[15,27,33,]),'numexp':([8,12,16,24,26,29,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,],[17,17,17,53,54,56,53,60,61,62,63,64,65,66,67,68,69,70,53,53,53,53,53,]),'boolexp':([8,12,16,24,31,46,47,48,49,50,],[18,18,34,51,57,71,72,73,74,75,]),'compexp':([8,12,16,24,31,46,47,48,49,50,],[22,22,22,22,22,22,22,22,22,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> stmts','prog',1,'p_prog','tac_generator.py',101),
  ('stmts -> statement stmts','stmts',2,'p_statements_recursion','tac_generator.py',109),
  ('stmts -> statement','stmts',1,'p_statements_recursion','tac_generator.py',110),
  ('statement -> INTDCL NAME ;','statement',3,'p_dcl_declare_int','tac_generator.py',121),
  ('statement -> INTDCL NAME = numexp ;','statement',5,'p_dcl_declare_int','tac_generator.py',122),
  ('statement -> FLOATDCL NAME ;','statement',3,'p_statement_declare_float','tac_generator.py',141),
  ('statement -> FLOATDCL NAME = numexp ;','statement',5,'p_statement_declare_float','tac_generator.py',142),
  ('statement -> BOOLDCL NAME ;','statement',3,'p_statement_declare_bool','tac_generator.py',162),
  ('statement -> BOOLDCL NAME = boolexp ;','statement',5,'p_statement_declare_bool','tac_generator.py',163),
  ('statement -> PRINT expression ;','statement',3,'p_statement_print','tac_generator.py',183),
  ('statement -> IF ( boolexp ) { stmts }','statement',7,'p_statement_if','tac_generator.py',191),
  ('statement -> NAME = expression ;','statement',4,'p_statement_assign','tac_generator.py',202),
  ('expression -> ( expression )','expression',3,'p_expression_group','tac_generator.py',219),
  ('numexp -> numexp + numexp','numexp',3,'p_expression_binop','tac_generator.py',224),
  ('numexp -> numexp - numexp','numexp',3,'p_expression_binop','tac_generator.py',225),
  ('numexp -> numexp * numexp','numexp',3,'p_expression_binop','tac_generator.py',226),
  ('numexp -> numexp / numexp','numexp',3,'p_expression_binop','tac_generator.py',227),
  ('numexp -> numexp ^ numexp','numexp',3,'p_expression_binop','tac_generator.py',228),
  ('expression -> numexp','expression',1,'p_expression_number','tac_generator.py',238),
  ('numexp -> INUMBER','numexp',1,'p_expression_inumber','tac_generator.py',243),
  ('numexp -> FNUMBER','numexp',1,'p_expression_fnumber','tac_generator.py',251),
  ('expression -> boolexp','expression',1,'p_expression_boolval','tac_generator.py',259),
  ('boolexp -> ( boolexp )','boolexp',3,'p_bool_expression','tac_generator.py',264),
  ('boolexp -> boolexp AND boolexp','boolexp',3,'p_bool_expression','tac_generator.py',265),
  ('boolexp -> boolexp OR boolexp','boolexp',3,'p_bool_expression','tac_generator.py',266),
  ('boolexp -> compexp','boolexp',1,'p_bool_expression','tac_generator.py',267),
  ('boolexp -> BOOLVAL','boolexp',1,'p_bool_expression','tac_generator.py',268),
  ('boolexp -> NAME','boolexp',1,'p_bool_expression','tac_generator.py',269),
  ('compexp -> boolexp EQUALS boolexp','compexp',3,'p_comparison_expression','tac_generator.py',287),
  ('compexp -> boolexp NOTEQUALS boolexp','compexp',3,'p_comparison_expression','tac_generator.py',288),
  ('compexp -> numexp EQUALS numexp','compexp',3,'p_comparison_expression','tac_generator.py',289),
  ('compexp -> numexp NOTEQUALS numexp','compexp',3,'p_comparison_expression','tac_generator.py',290),
  ('compexp -> numexp GREATER numexp','compexp',3,'p_comparison_expression','tac_generator.py',291),
  ('compexp -> numexp LESS numexp','compexp',3,'p_comparison_expression','tac_generator.py',292),
  ('compexp -> numexp LESSEQUALS numexp','compexp',3,'p_comparison_expression','tac_generator.py',293),
  ('compexp -> numexp GREATEREQUALS numexp','compexp',3,'p_comparison_expression','tac_generator.py',294),
  ('expression -> NAME','expression',1,'p_expression_name','tac_generator.py',303),
]
