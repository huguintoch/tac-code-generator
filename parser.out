Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> stmts
Rule 2     stmts -> statement stmts
Rule 3     stmts -> statement
Rule 4     statement -> INTDCL NAME ;
Rule 5     statement -> INTDCL NAME = numexp ;
Rule 6     statement -> FLOATDCL NAME ;
Rule 7     statement -> FLOATDCL NAME = numexp ;
Rule 8     statement -> BOOLDCL NAME ;
Rule 9     statement -> BOOLDCL NAME = boolexp ;
Rule 10    statement -> PRINT expression ;
Rule 11    statement -> IF ( boolexp ) { stmts }
Rule 12    statement -> NAME = expression ;
Rule 13    expression -> ( expression )
Rule 14    numexp -> numexp + numexp
Rule 15    numexp -> numexp - numexp
Rule 16    numexp -> numexp * numexp
Rule 17    numexp -> numexp / numexp
Rule 18    numexp -> numexp ^ numexp
Rule 19    expression -> numexp
Rule 20    numexp -> INUMBER
Rule 21    numexp -> FNUMBER
Rule 22    expression -> boolexp
Rule 23    boolexp -> ( boolexp )
Rule 24    boolexp -> boolexp AND boolexp
Rule 25    boolexp -> boolexp OR boolexp
Rule 26    boolexp -> compexp
Rule 27    boolexp -> BOOLVAL
Rule 28    boolexp -> NAME
Rule 29    compexp -> boolexp EQUALS boolexp
Rule 30    compexp -> boolexp NOTEQUALS boolexp
Rule 31    compexp -> numexp EQUALS numexp
Rule 32    compexp -> numexp NOTEQUALS numexp
Rule 33    compexp -> numexp GREATER numexp
Rule 34    compexp -> numexp LESS numexp
Rule 35    compexp -> numexp LESSEQUALS numexp
Rule 36    compexp -> numexp GREATEREQUALS numexp
Rule 37    expression -> NAME

Terminals, with rules where they appear

(                    : 11 13 23
)                    : 11 13 23
*                    : 16
+                    : 14
-                    : 15
/                    : 17
;                    : 4 5 6 7 8 9 10 12
=                    : 5 7 9 12
AND                  : 24
BOOLDCL              : 8 9
BOOLVAL              : 27
EQUALS               : 29 31
FLOATDCL             : 6 7
FNUMBER              : 21
GREATER              : 33
GREATEREQUALS        : 36
IF                   : 11
INTDCL               : 4 5
INUMBER              : 20
LESS                 : 34
LESSEQUALS           : 35
NAME                 : 4 5 6 7 8 9 12 28 37
NOTEQUALS            : 30 32
OR                   : 25
PRINT                : 10
^                    : 18
error                : 
{                    : 11
}                    : 11

Nonterminals, with rules where they appear

boolexp              : 9 11 22 23 24 24 25 25 29 29 30 30
compexp              : 26
expression           : 10 12 13
numexp               : 5 7 14 14 15 15 16 16 17 17 18 18 19 31 31 32 32 33 33 34 34 35 35 36 36
prog                 : 0
statement            : 2 3
stmts                : 1 2 11

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . stmts
    (2) stmts -> . statement stmts
    (3) stmts -> . statement
    (4) statement -> . INTDCL NAME ;
    (5) statement -> . INTDCL NAME = numexp ;
    (6) statement -> . FLOATDCL NAME ;
    (7) statement -> . FLOATDCL NAME = numexp ;
    (8) statement -> . BOOLDCL NAME ;
    (9) statement -> . BOOLDCL NAME = boolexp ;
    (10) statement -> . PRINT expression ;
    (11) statement -> . IF ( boolexp ) { stmts }
    (12) statement -> . NAME = expression ;

    INTDCL          shift and go to state 4
    FLOATDCL        shift and go to state 6
    BOOLDCL         shift and go to state 7
    PRINT           shift and go to state 8
    IF              shift and go to state 9
    NAME            shift and go to state 5

    prog                           shift and go to state 1
    stmts                          shift and go to state 2
    statement                      shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> stmts .

    $end            reduce using rule 1 (prog -> stmts .)


state 3

    (2) stmts -> statement . stmts
    (3) stmts -> statement .
    (2) stmts -> . statement stmts
    (3) stmts -> . statement
    (4) statement -> . INTDCL NAME ;
    (5) statement -> . INTDCL NAME = numexp ;
    (6) statement -> . FLOATDCL NAME ;
    (7) statement -> . FLOATDCL NAME = numexp ;
    (8) statement -> . BOOLDCL NAME ;
    (9) statement -> . BOOLDCL NAME = boolexp ;
    (10) statement -> . PRINT expression ;
    (11) statement -> . IF ( boolexp ) { stmts }
    (12) statement -> . NAME = expression ;

    $end            reduce using rule 3 (stmts -> statement .)
    }               reduce using rule 3 (stmts -> statement .)
    INTDCL          shift and go to state 4
    FLOATDCL        shift and go to state 6
    BOOLDCL         shift and go to state 7
    PRINT           shift and go to state 8
    IF              shift and go to state 9
    NAME            shift and go to state 5

    statement                      shift and go to state 3
    stmts                          shift and go to state 10

state 4

    (4) statement -> INTDCL . NAME ;
    (5) statement -> INTDCL . NAME = numexp ;

    NAME            shift and go to state 11


state 5

    (12) statement -> NAME . = expression ;

    =               shift and go to state 12


state 6

    (6) statement -> FLOATDCL . NAME ;
    (7) statement -> FLOATDCL . NAME = numexp ;

    NAME            shift and go to state 13


state 7

    (8) statement -> BOOLDCL . NAME ;
    (9) statement -> BOOLDCL . NAME = boolexp ;

    NAME            shift and go to state 14


state 8

    (10) statement -> PRINT . expression ;
    (13) expression -> . ( expression )
    (19) expression -> . numexp
    (22) expression -> . boolexp
    (37) expression -> . NAME
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER
    (23) boolexp -> . ( boolexp )
    (24) boolexp -> . boolexp AND boolexp
    (25) boolexp -> . boolexp OR boolexp
    (26) boolexp -> . compexp
    (27) boolexp -> . BOOLVAL
    (28) boolexp -> . NAME
    (29) compexp -> . boolexp EQUALS boolexp
    (30) compexp -> . boolexp NOTEQUALS boolexp
    (31) compexp -> . numexp EQUALS numexp
    (32) compexp -> . numexp NOTEQUALS numexp
    (33) compexp -> . numexp GREATER numexp
    (34) compexp -> . numexp LESS numexp
    (35) compexp -> . numexp LESSEQUALS numexp
    (36) compexp -> . numexp GREATEREQUALS numexp

    (               shift and go to state 16
    NAME            shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    BOOLVAL         shift and go to state 23

    expression                     shift and go to state 15
    numexp                         shift and go to state 17
    boolexp                        shift and go to state 18
    compexp                        shift and go to state 22

state 9

    (11) statement -> IF . ( boolexp ) { stmts }

    (               shift and go to state 24


state 10

    (2) stmts -> statement stmts .

    $end            reduce using rule 2 (stmts -> statement stmts .)
    }               reduce using rule 2 (stmts -> statement stmts .)


state 11

    (4) statement -> INTDCL NAME . ;
    (5) statement -> INTDCL NAME . = numexp ;

    ;               shift and go to state 25
    =               shift and go to state 26


state 12

    (12) statement -> NAME = . expression ;
    (13) expression -> . ( expression )
    (19) expression -> . numexp
    (22) expression -> . boolexp
    (37) expression -> . NAME
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER
    (23) boolexp -> . ( boolexp )
    (24) boolexp -> . boolexp AND boolexp
    (25) boolexp -> . boolexp OR boolexp
    (26) boolexp -> . compexp
    (27) boolexp -> . BOOLVAL
    (28) boolexp -> . NAME
    (29) compexp -> . boolexp EQUALS boolexp
    (30) compexp -> . boolexp NOTEQUALS boolexp
    (31) compexp -> . numexp EQUALS numexp
    (32) compexp -> . numexp NOTEQUALS numexp
    (33) compexp -> . numexp GREATER numexp
    (34) compexp -> . numexp LESS numexp
    (35) compexp -> . numexp LESSEQUALS numexp
    (36) compexp -> . numexp GREATEREQUALS numexp

    (               shift and go to state 16
    NAME            shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    BOOLVAL         shift and go to state 23

    expression                     shift and go to state 27
    numexp                         shift and go to state 17
    boolexp                        shift and go to state 18
    compexp                        shift and go to state 22

state 13

    (6) statement -> FLOATDCL NAME . ;
    (7) statement -> FLOATDCL NAME . = numexp ;

    ;               shift and go to state 28
    =               shift and go to state 29


state 14

    (8) statement -> BOOLDCL NAME . ;
    (9) statement -> BOOLDCL NAME . = boolexp ;

    ;               shift and go to state 30
    =               shift and go to state 31


state 15

    (10) statement -> PRINT expression . ;

    ;               shift and go to state 32


state 16

    (13) expression -> ( . expression )
    (23) boolexp -> ( . boolexp )
    (13) expression -> . ( expression )
    (19) expression -> . numexp
    (22) expression -> . boolexp
    (37) expression -> . NAME
    (23) boolexp -> . ( boolexp )
    (24) boolexp -> . boolexp AND boolexp
    (25) boolexp -> . boolexp OR boolexp
    (26) boolexp -> . compexp
    (27) boolexp -> . BOOLVAL
    (28) boolexp -> . NAME
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER
    (29) compexp -> . boolexp EQUALS boolexp
    (30) compexp -> . boolexp NOTEQUALS boolexp
    (31) compexp -> . numexp EQUALS numexp
    (32) compexp -> . numexp NOTEQUALS numexp
    (33) compexp -> . numexp GREATER numexp
    (34) compexp -> . numexp LESS numexp
    (35) compexp -> . numexp LESSEQUALS numexp
    (36) compexp -> . numexp GREATEREQUALS numexp

    (               shift and go to state 16
    NAME            shift and go to state 19
    BOOLVAL         shift and go to state 23
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    expression                     shift and go to state 33
    boolexp                        shift and go to state 34
    numexp                         shift and go to state 17
    compexp                        shift and go to state 22

state 17

    (19) expression -> numexp .
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp
    (31) compexp -> numexp . EQUALS numexp
    (32) compexp -> numexp . NOTEQUALS numexp
    (33) compexp -> numexp . GREATER numexp
    (34) compexp -> numexp . LESS numexp
    (35) compexp -> numexp . LESSEQUALS numexp
    (36) compexp -> numexp . GREATEREQUALS numexp

    ;               reduce using rule 19 (expression -> numexp .)
    )               reduce using rule 19 (expression -> numexp .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39
    EQUALS          shift and go to state 40
    NOTEQUALS       shift and go to state 41
    GREATER         shift and go to state 42
    LESS            shift and go to state 43
    LESSEQUALS      shift and go to state 44
    GREATEREQUALS   shift and go to state 45


state 18

    (22) expression -> boolexp .
    (24) boolexp -> boolexp . AND boolexp
    (25) boolexp -> boolexp . OR boolexp
    (29) compexp -> boolexp . EQUALS boolexp
    (30) compexp -> boolexp . NOTEQUALS boolexp

    ;               reduce using rule 22 (expression -> boolexp .)
    AND             shift and go to state 46
    OR              shift and go to state 47
    EQUALS          shift and go to state 48
    NOTEQUALS       shift and go to state 49


state 19

    (37) expression -> NAME .
    (28) boolexp -> NAME .

  ! reduce/reduce conflict for ; resolved using rule 28 (boolexp -> NAME .)
  ! reduce/reduce conflict for ) resolved using rule 28 (boolexp -> NAME .)
    AND             reduce using rule 28 (boolexp -> NAME .)
    OR              reduce using rule 28 (boolexp -> NAME .)
    EQUALS          reduce using rule 28 (boolexp -> NAME .)
    NOTEQUALS       reduce using rule 28 (boolexp -> NAME .)
    ;               reduce using rule 28 (boolexp -> NAME .)
    )               reduce using rule 28 (boolexp -> NAME .)

  ! ;               [ reduce using rule 37 (expression -> NAME .) ]
  ! )               [ reduce using rule 37 (expression -> NAME .) ]


state 20

    (20) numexp -> INUMBER .

    +               reduce using rule 20 (numexp -> INUMBER .)
    -               reduce using rule 20 (numexp -> INUMBER .)
    *               reduce using rule 20 (numexp -> INUMBER .)
    /               reduce using rule 20 (numexp -> INUMBER .)
    ^               reduce using rule 20 (numexp -> INUMBER .)
    EQUALS          reduce using rule 20 (numexp -> INUMBER .)
    NOTEQUALS       reduce using rule 20 (numexp -> INUMBER .)
    GREATER         reduce using rule 20 (numexp -> INUMBER .)
    LESS            reduce using rule 20 (numexp -> INUMBER .)
    LESSEQUALS      reduce using rule 20 (numexp -> INUMBER .)
    GREATEREQUALS   reduce using rule 20 (numexp -> INUMBER .)
    ;               reduce using rule 20 (numexp -> INUMBER .)
    )               reduce using rule 20 (numexp -> INUMBER .)
    AND             reduce using rule 20 (numexp -> INUMBER .)
    OR              reduce using rule 20 (numexp -> INUMBER .)


state 21

    (21) numexp -> FNUMBER .

    +               reduce using rule 21 (numexp -> FNUMBER .)
    -               reduce using rule 21 (numexp -> FNUMBER .)
    *               reduce using rule 21 (numexp -> FNUMBER .)
    /               reduce using rule 21 (numexp -> FNUMBER .)
    ^               reduce using rule 21 (numexp -> FNUMBER .)
    EQUALS          reduce using rule 21 (numexp -> FNUMBER .)
    NOTEQUALS       reduce using rule 21 (numexp -> FNUMBER .)
    GREATER         reduce using rule 21 (numexp -> FNUMBER .)
    LESS            reduce using rule 21 (numexp -> FNUMBER .)
    LESSEQUALS      reduce using rule 21 (numexp -> FNUMBER .)
    GREATEREQUALS   reduce using rule 21 (numexp -> FNUMBER .)
    ;               reduce using rule 21 (numexp -> FNUMBER .)
    )               reduce using rule 21 (numexp -> FNUMBER .)
    AND             reduce using rule 21 (numexp -> FNUMBER .)
    OR              reduce using rule 21 (numexp -> FNUMBER .)


state 22

    (26) boolexp -> compexp .

    AND             reduce using rule 26 (boolexp -> compexp .)
    OR              reduce using rule 26 (boolexp -> compexp .)
    EQUALS          reduce using rule 26 (boolexp -> compexp .)
    NOTEQUALS       reduce using rule 26 (boolexp -> compexp .)
    ;               reduce using rule 26 (boolexp -> compexp .)
    )               reduce using rule 26 (boolexp -> compexp .)


state 23

    (27) boolexp -> BOOLVAL .

    AND             reduce using rule 27 (boolexp -> BOOLVAL .)
    OR              reduce using rule 27 (boolexp -> BOOLVAL .)
    EQUALS          reduce using rule 27 (boolexp -> BOOLVAL .)
    NOTEQUALS       reduce using rule 27 (boolexp -> BOOLVAL .)
    ;               reduce using rule 27 (boolexp -> BOOLVAL .)
    )               reduce using rule 27 (boolexp -> BOOLVAL .)


state 24

    (11) statement -> IF ( . boolexp ) { stmts }
    (23) boolexp -> . ( boolexp )
    (24) boolexp -> . boolexp AND boolexp
    (25) boolexp -> . boolexp OR boolexp
    (26) boolexp -> . compexp
    (27) boolexp -> . BOOLVAL
    (28) boolexp -> . NAME
    (29) compexp -> . boolexp EQUALS boolexp
    (30) compexp -> . boolexp NOTEQUALS boolexp
    (31) compexp -> . numexp EQUALS numexp
    (32) compexp -> . numexp NOTEQUALS numexp
    (33) compexp -> . numexp GREATER numexp
    (34) compexp -> . numexp LESS numexp
    (35) compexp -> . numexp LESSEQUALS numexp
    (36) compexp -> . numexp GREATEREQUALS numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    (               shift and go to state 50
    BOOLVAL         shift and go to state 23
    NAME            shift and go to state 52
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    boolexp                        shift and go to state 51
    compexp                        shift and go to state 22
    numexp                         shift and go to state 53

state 25

    (4) statement -> INTDCL NAME ; .

    INTDCL          reduce using rule 4 (statement -> INTDCL NAME ; .)
    FLOATDCL        reduce using rule 4 (statement -> INTDCL NAME ; .)
    BOOLDCL         reduce using rule 4 (statement -> INTDCL NAME ; .)
    PRINT           reduce using rule 4 (statement -> INTDCL NAME ; .)
    IF              reduce using rule 4 (statement -> INTDCL NAME ; .)
    NAME            reduce using rule 4 (statement -> INTDCL NAME ; .)
    $end            reduce using rule 4 (statement -> INTDCL NAME ; .)
    }               reduce using rule 4 (statement -> INTDCL NAME ; .)


state 26

    (5) statement -> INTDCL NAME = . numexp ;
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 54

state 27

    (12) statement -> NAME = expression . ;

    ;               shift and go to state 55


state 28

    (6) statement -> FLOATDCL NAME ; .

    INTDCL          reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    FLOATDCL        reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    BOOLDCL         reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    PRINT           reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    IF              reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    NAME            reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    $end            reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    }               reduce using rule 6 (statement -> FLOATDCL NAME ; .)


state 29

    (7) statement -> FLOATDCL NAME = . numexp ;
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 56

state 30

    (8) statement -> BOOLDCL NAME ; .

    INTDCL          reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    FLOATDCL        reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    BOOLDCL         reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    PRINT           reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    IF              reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    NAME            reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    $end            reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    }               reduce using rule 8 (statement -> BOOLDCL NAME ; .)


state 31

    (9) statement -> BOOLDCL NAME = . boolexp ;
    (23) boolexp -> . ( boolexp )
    (24) boolexp -> . boolexp AND boolexp
    (25) boolexp -> . boolexp OR boolexp
    (26) boolexp -> . compexp
    (27) boolexp -> . BOOLVAL
    (28) boolexp -> . NAME
    (29) compexp -> . boolexp EQUALS boolexp
    (30) compexp -> . boolexp NOTEQUALS boolexp
    (31) compexp -> . numexp EQUALS numexp
    (32) compexp -> . numexp NOTEQUALS numexp
    (33) compexp -> . numexp GREATER numexp
    (34) compexp -> . numexp LESS numexp
    (35) compexp -> . numexp LESSEQUALS numexp
    (36) compexp -> . numexp GREATEREQUALS numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    (               shift and go to state 50
    BOOLVAL         shift and go to state 23
    NAME            shift and go to state 52
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    boolexp                        shift and go to state 57
    compexp                        shift and go to state 22
    numexp                         shift and go to state 53

state 32

    (10) statement -> PRINT expression ; .

    INTDCL          reduce using rule 10 (statement -> PRINT expression ; .)
    FLOATDCL        reduce using rule 10 (statement -> PRINT expression ; .)
    BOOLDCL         reduce using rule 10 (statement -> PRINT expression ; .)
    PRINT           reduce using rule 10 (statement -> PRINT expression ; .)
    IF              reduce using rule 10 (statement -> PRINT expression ; .)
    NAME            reduce using rule 10 (statement -> PRINT expression ; .)
    $end            reduce using rule 10 (statement -> PRINT expression ; .)
    }               reduce using rule 10 (statement -> PRINT expression ; .)


state 33

    (13) expression -> ( expression . )

    )               shift and go to state 58


state 34

    (23) boolexp -> ( boolexp . )
    (22) expression -> boolexp .
    (24) boolexp -> boolexp . AND boolexp
    (25) boolexp -> boolexp . OR boolexp
    (29) compexp -> boolexp . EQUALS boolexp
    (30) compexp -> boolexp . NOTEQUALS boolexp

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 59
    AND             shift and go to state 46
    OR              shift and go to state 47
    EQUALS          shift and go to state 48
    NOTEQUALS       shift and go to state 49

  ! )               [ reduce using rule 22 (expression -> boolexp .) ]


state 35

    (14) numexp -> numexp + . numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 60

state 36

    (15) numexp -> numexp - . numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 61

state 37

    (16) numexp -> numexp * . numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 62

state 38

    (17) numexp -> numexp / . numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 63

state 39

    (18) numexp -> numexp ^ . numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 64

state 40

    (31) compexp -> numexp EQUALS . numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 65

state 41

    (32) compexp -> numexp NOTEQUALS . numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 66

state 42

    (33) compexp -> numexp GREATER . numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 67

state 43

    (34) compexp -> numexp LESS . numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 68

state 44

    (35) compexp -> numexp LESSEQUALS . numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 69

state 45

    (36) compexp -> numexp GREATEREQUALS . numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    numexp                         shift and go to state 70

state 46

    (24) boolexp -> boolexp AND . boolexp
    (23) boolexp -> . ( boolexp )
    (24) boolexp -> . boolexp AND boolexp
    (25) boolexp -> . boolexp OR boolexp
    (26) boolexp -> . compexp
    (27) boolexp -> . BOOLVAL
    (28) boolexp -> . NAME
    (29) compexp -> . boolexp EQUALS boolexp
    (30) compexp -> . boolexp NOTEQUALS boolexp
    (31) compexp -> . numexp EQUALS numexp
    (32) compexp -> . numexp NOTEQUALS numexp
    (33) compexp -> . numexp GREATER numexp
    (34) compexp -> . numexp LESS numexp
    (35) compexp -> . numexp LESSEQUALS numexp
    (36) compexp -> . numexp GREATEREQUALS numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    (               shift and go to state 50
    BOOLVAL         shift and go to state 23
    NAME            shift and go to state 52
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    boolexp                        shift and go to state 71
    compexp                        shift and go to state 22
    numexp                         shift and go to state 53

state 47

    (25) boolexp -> boolexp OR . boolexp
    (23) boolexp -> . ( boolexp )
    (24) boolexp -> . boolexp AND boolexp
    (25) boolexp -> . boolexp OR boolexp
    (26) boolexp -> . compexp
    (27) boolexp -> . BOOLVAL
    (28) boolexp -> . NAME
    (29) compexp -> . boolexp EQUALS boolexp
    (30) compexp -> . boolexp NOTEQUALS boolexp
    (31) compexp -> . numexp EQUALS numexp
    (32) compexp -> . numexp NOTEQUALS numexp
    (33) compexp -> . numexp GREATER numexp
    (34) compexp -> . numexp LESS numexp
    (35) compexp -> . numexp LESSEQUALS numexp
    (36) compexp -> . numexp GREATEREQUALS numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    (               shift and go to state 50
    BOOLVAL         shift and go to state 23
    NAME            shift and go to state 52
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    boolexp                        shift and go to state 72
    compexp                        shift and go to state 22
    numexp                         shift and go to state 53

state 48

    (29) compexp -> boolexp EQUALS . boolexp
    (23) boolexp -> . ( boolexp )
    (24) boolexp -> . boolexp AND boolexp
    (25) boolexp -> . boolexp OR boolexp
    (26) boolexp -> . compexp
    (27) boolexp -> . BOOLVAL
    (28) boolexp -> . NAME
    (29) compexp -> . boolexp EQUALS boolexp
    (30) compexp -> . boolexp NOTEQUALS boolexp
    (31) compexp -> . numexp EQUALS numexp
    (32) compexp -> . numexp NOTEQUALS numexp
    (33) compexp -> . numexp GREATER numexp
    (34) compexp -> . numexp LESS numexp
    (35) compexp -> . numexp LESSEQUALS numexp
    (36) compexp -> . numexp GREATEREQUALS numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    (               shift and go to state 50
    BOOLVAL         shift and go to state 23
    NAME            shift and go to state 52
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    boolexp                        shift and go to state 73
    compexp                        shift and go to state 22
    numexp                         shift and go to state 53

state 49

    (30) compexp -> boolexp NOTEQUALS . boolexp
    (23) boolexp -> . ( boolexp )
    (24) boolexp -> . boolexp AND boolexp
    (25) boolexp -> . boolexp OR boolexp
    (26) boolexp -> . compexp
    (27) boolexp -> . BOOLVAL
    (28) boolexp -> . NAME
    (29) compexp -> . boolexp EQUALS boolexp
    (30) compexp -> . boolexp NOTEQUALS boolexp
    (31) compexp -> . numexp EQUALS numexp
    (32) compexp -> . numexp NOTEQUALS numexp
    (33) compexp -> . numexp GREATER numexp
    (34) compexp -> . numexp LESS numexp
    (35) compexp -> . numexp LESSEQUALS numexp
    (36) compexp -> . numexp GREATEREQUALS numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    (               shift and go to state 50
    BOOLVAL         shift and go to state 23
    NAME            shift and go to state 52
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    boolexp                        shift and go to state 74
    compexp                        shift and go to state 22
    numexp                         shift and go to state 53

state 50

    (23) boolexp -> ( . boolexp )
    (23) boolexp -> . ( boolexp )
    (24) boolexp -> . boolexp AND boolexp
    (25) boolexp -> . boolexp OR boolexp
    (26) boolexp -> . compexp
    (27) boolexp -> . BOOLVAL
    (28) boolexp -> . NAME
    (29) compexp -> . boolexp EQUALS boolexp
    (30) compexp -> . boolexp NOTEQUALS boolexp
    (31) compexp -> . numexp EQUALS numexp
    (32) compexp -> . numexp NOTEQUALS numexp
    (33) compexp -> . numexp GREATER numexp
    (34) compexp -> . numexp LESS numexp
    (35) compexp -> . numexp LESSEQUALS numexp
    (36) compexp -> . numexp GREATEREQUALS numexp
    (14) numexp -> . numexp + numexp
    (15) numexp -> . numexp - numexp
    (16) numexp -> . numexp * numexp
    (17) numexp -> . numexp / numexp
    (18) numexp -> . numexp ^ numexp
    (20) numexp -> . INUMBER
    (21) numexp -> . FNUMBER

    (               shift and go to state 50
    BOOLVAL         shift and go to state 23
    NAME            shift and go to state 52
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21

    boolexp                        shift and go to state 75
    compexp                        shift and go to state 22
    numexp                         shift and go to state 53

state 51

    (11) statement -> IF ( boolexp . ) { stmts }
    (24) boolexp -> boolexp . AND boolexp
    (25) boolexp -> boolexp . OR boolexp
    (29) compexp -> boolexp . EQUALS boolexp
    (30) compexp -> boolexp . NOTEQUALS boolexp

    )               shift and go to state 76
    AND             shift and go to state 46
    OR              shift and go to state 47
    EQUALS          shift and go to state 48
    NOTEQUALS       shift and go to state 49


state 52

    (28) boolexp -> NAME .

    )               reduce using rule 28 (boolexp -> NAME .)
    AND             reduce using rule 28 (boolexp -> NAME .)
    OR              reduce using rule 28 (boolexp -> NAME .)
    EQUALS          reduce using rule 28 (boolexp -> NAME .)
    NOTEQUALS       reduce using rule 28 (boolexp -> NAME .)
    ;               reduce using rule 28 (boolexp -> NAME .)


state 53

    (31) compexp -> numexp . EQUALS numexp
    (32) compexp -> numexp . NOTEQUALS numexp
    (33) compexp -> numexp . GREATER numexp
    (34) compexp -> numexp . LESS numexp
    (35) compexp -> numexp . LESSEQUALS numexp
    (36) compexp -> numexp . GREATEREQUALS numexp
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

    EQUALS          shift and go to state 40
    NOTEQUALS       shift and go to state 41
    GREATER         shift and go to state 42
    LESS            shift and go to state 43
    LESSEQUALS      shift and go to state 44
    GREATEREQUALS   shift and go to state 45
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39


state 54

    (5) statement -> INTDCL NAME = numexp . ;
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

    ;               shift and go to state 77
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39


state 55

    (12) statement -> NAME = expression ; .

    INTDCL          reduce using rule 12 (statement -> NAME = expression ; .)
    FLOATDCL        reduce using rule 12 (statement -> NAME = expression ; .)
    BOOLDCL         reduce using rule 12 (statement -> NAME = expression ; .)
    PRINT           reduce using rule 12 (statement -> NAME = expression ; .)
    IF              reduce using rule 12 (statement -> NAME = expression ; .)
    NAME            reduce using rule 12 (statement -> NAME = expression ; .)
    $end            reduce using rule 12 (statement -> NAME = expression ; .)
    }               reduce using rule 12 (statement -> NAME = expression ; .)


state 56

    (7) statement -> FLOATDCL NAME = numexp . ;
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

    ;               shift and go to state 78
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39


state 57

    (9) statement -> BOOLDCL NAME = boolexp . ;
    (24) boolexp -> boolexp . AND boolexp
    (25) boolexp -> boolexp . OR boolexp
    (29) compexp -> boolexp . EQUALS boolexp
    (30) compexp -> boolexp . NOTEQUALS boolexp

    ;               shift and go to state 79
    AND             shift and go to state 46
    OR              shift and go to state 47
    EQUALS          shift and go to state 48
    NOTEQUALS       shift and go to state 49


state 58

    (13) expression -> ( expression ) .

    ;               reduce using rule 13 (expression -> ( expression ) .)
    )               reduce using rule 13 (expression -> ( expression ) .)


state 59

    (23) boolexp -> ( boolexp ) .

    AND             reduce using rule 23 (boolexp -> ( boolexp ) .)
    OR              reduce using rule 23 (boolexp -> ( boolexp ) .)
    EQUALS          reduce using rule 23 (boolexp -> ( boolexp ) .)
    NOTEQUALS       reduce using rule 23 (boolexp -> ( boolexp ) .)
    ;               reduce using rule 23 (boolexp -> ( boolexp ) .)
    )               reduce using rule 23 (boolexp -> ( boolexp ) .)


state 60

    (14) numexp -> numexp + numexp .
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    EQUALS          reduce using rule 14 (numexp -> numexp + numexp .)
    NOTEQUALS       reduce using rule 14 (numexp -> numexp + numexp .)
    GREATER         reduce using rule 14 (numexp -> numexp + numexp .)
    LESS            reduce using rule 14 (numexp -> numexp + numexp .)
    LESSEQUALS      reduce using rule 14 (numexp -> numexp + numexp .)
    GREATEREQUALS   reduce using rule 14 (numexp -> numexp + numexp .)
    ;               reduce using rule 14 (numexp -> numexp + numexp .)
    )               reduce using rule 14 (numexp -> numexp + numexp .)
    AND             reduce using rule 14 (numexp -> numexp + numexp .)
    OR              reduce using rule 14 (numexp -> numexp + numexp .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39

  ! +               [ reduce using rule 14 (numexp -> numexp + numexp .) ]
  ! -               [ reduce using rule 14 (numexp -> numexp + numexp .) ]
  ! *               [ reduce using rule 14 (numexp -> numexp + numexp .) ]
  ! /               [ reduce using rule 14 (numexp -> numexp + numexp .) ]
  ! ^               [ reduce using rule 14 (numexp -> numexp + numexp .) ]


state 61

    (15) numexp -> numexp - numexp .
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    EQUALS          reduce using rule 15 (numexp -> numexp - numexp .)
    NOTEQUALS       reduce using rule 15 (numexp -> numexp - numexp .)
    GREATER         reduce using rule 15 (numexp -> numexp - numexp .)
    LESS            reduce using rule 15 (numexp -> numexp - numexp .)
    LESSEQUALS      reduce using rule 15 (numexp -> numexp - numexp .)
    GREATEREQUALS   reduce using rule 15 (numexp -> numexp - numexp .)
    ;               reduce using rule 15 (numexp -> numexp - numexp .)
    )               reduce using rule 15 (numexp -> numexp - numexp .)
    AND             reduce using rule 15 (numexp -> numexp - numexp .)
    OR              reduce using rule 15 (numexp -> numexp - numexp .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39

  ! +               [ reduce using rule 15 (numexp -> numexp - numexp .) ]
  ! -               [ reduce using rule 15 (numexp -> numexp - numexp .) ]
  ! *               [ reduce using rule 15 (numexp -> numexp - numexp .) ]
  ! /               [ reduce using rule 15 (numexp -> numexp - numexp .) ]
  ! ^               [ reduce using rule 15 (numexp -> numexp - numexp .) ]


state 62

    (16) numexp -> numexp * numexp .
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    EQUALS          reduce using rule 16 (numexp -> numexp * numexp .)
    NOTEQUALS       reduce using rule 16 (numexp -> numexp * numexp .)
    GREATER         reduce using rule 16 (numexp -> numexp * numexp .)
    LESS            reduce using rule 16 (numexp -> numexp * numexp .)
    LESSEQUALS      reduce using rule 16 (numexp -> numexp * numexp .)
    GREATEREQUALS   reduce using rule 16 (numexp -> numexp * numexp .)
    ;               reduce using rule 16 (numexp -> numexp * numexp .)
    )               reduce using rule 16 (numexp -> numexp * numexp .)
    AND             reduce using rule 16 (numexp -> numexp * numexp .)
    OR              reduce using rule 16 (numexp -> numexp * numexp .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39

  ! +               [ reduce using rule 16 (numexp -> numexp * numexp .) ]
  ! -               [ reduce using rule 16 (numexp -> numexp * numexp .) ]
  ! *               [ reduce using rule 16 (numexp -> numexp * numexp .) ]
  ! /               [ reduce using rule 16 (numexp -> numexp * numexp .) ]
  ! ^               [ reduce using rule 16 (numexp -> numexp * numexp .) ]


state 63

    (17) numexp -> numexp / numexp .
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    EQUALS          reduce using rule 17 (numexp -> numexp / numexp .)
    NOTEQUALS       reduce using rule 17 (numexp -> numexp / numexp .)
    GREATER         reduce using rule 17 (numexp -> numexp / numexp .)
    LESS            reduce using rule 17 (numexp -> numexp / numexp .)
    LESSEQUALS      reduce using rule 17 (numexp -> numexp / numexp .)
    GREATEREQUALS   reduce using rule 17 (numexp -> numexp / numexp .)
    ;               reduce using rule 17 (numexp -> numexp / numexp .)
    )               reduce using rule 17 (numexp -> numexp / numexp .)
    AND             reduce using rule 17 (numexp -> numexp / numexp .)
    OR              reduce using rule 17 (numexp -> numexp / numexp .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39

  ! +               [ reduce using rule 17 (numexp -> numexp / numexp .) ]
  ! -               [ reduce using rule 17 (numexp -> numexp / numexp .) ]
  ! *               [ reduce using rule 17 (numexp -> numexp / numexp .) ]
  ! /               [ reduce using rule 17 (numexp -> numexp / numexp .) ]
  ! ^               [ reduce using rule 17 (numexp -> numexp / numexp .) ]


state 64

    (18) numexp -> numexp ^ numexp .
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    EQUALS          reduce using rule 18 (numexp -> numexp ^ numexp .)
    NOTEQUALS       reduce using rule 18 (numexp -> numexp ^ numexp .)
    GREATER         reduce using rule 18 (numexp -> numexp ^ numexp .)
    LESS            reduce using rule 18 (numexp -> numexp ^ numexp .)
    LESSEQUALS      reduce using rule 18 (numexp -> numexp ^ numexp .)
    GREATEREQUALS   reduce using rule 18 (numexp -> numexp ^ numexp .)
    ;               reduce using rule 18 (numexp -> numexp ^ numexp .)
    )               reduce using rule 18 (numexp -> numexp ^ numexp .)
    AND             reduce using rule 18 (numexp -> numexp ^ numexp .)
    OR              reduce using rule 18 (numexp -> numexp ^ numexp .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39

  ! +               [ reduce using rule 18 (numexp -> numexp ^ numexp .) ]
  ! -               [ reduce using rule 18 (numexp -> numexp ^ numexp .) ]
  ! *               [ reduce using rule 18 (numexp -> numexp ^ numexp .) ]
  ! /               [ reduce using rule 18 (numexp -> numexp ^ numexp .) ]
  ! ^               [ reduce using rule 18 (numexp -> numexp ^ numexp .) ]


state 65

    (31) compexp -> numexp EQUALS numexp .
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

    AND             reduce using rule 31 (compexp -> numexp EQUALS numexp .)
    OR              reduce using rule 31 (compexp -> numexp EQUALS numexp .)
    EQUALS          reduce using rule 31 (compexp -> numexp EQUALS numexp .)
    NOTEQUALS       reduce using rule 31 (compexp -> numexp EQUALS numexp .)
    ;               reduce using rule 31 (compexp -> numexp EQUALS numexp .)
    )               reduce using rule 31 (compexp -> numexp EQUALS numexp .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39


state 66

    (32) compexp -> numexp NOTEQUALS numexp .
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

    AND             reduce using rule 32 (compexp -> numexp NOTEQUALS numexp .)
    OR              reduce using rule 32 (compexp -> numexp NOTEQUALS numexp .)
    EQUALS          reduce using rule 32 (compexp -> numexp NOTEQUALS numexp .)
    NOTEQUALS       reduce using rule 32 (compexp -> numexp NOTEQUALS numexp .)
    ;               reduce using rule 32 (compexp -> numexp NOTEQUALS numexp .)
    )               reduce using rule 32 (compexp -> numexp NOTEQUALS numexp .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39


state 67

    (33) compexp -> numexp GREATER numexp .
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

    AND             reduce using rule 33 (compexp -> numexp GREATER numexp .)
    OR              reduce using rule 33 (compexp -> numexp GREATER numexp .)
    EQUALS          reduce using rule 33 (compexp -> numexp GREATER numexp .)
    NOTEQUALS       reduce using rule 33 (compexp -> numexp GREATER numexp .)
    ;               reduce using rule 33 (compexp -> numexp GREATER numexp .)
    )               reduce using rule 33 (compexp -> numexp GREATER numexp .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39


state 68

    (34) compexp -> numexp LESS numexp .
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

    AND             reduce using rule 34 (compexp -> numexp LESS numexp .)
    OR              reduce using rule 34 (compexp -> numexp LESS numexp .)
    EQUALS          reduce using rule 34 (compexp -> numexp LESS numexp .)
    NOTEQUALS       reduce using rule 34 (compexp -> numexp LESS numexp .)
    ;               reduce using rule 34 (compexp -> numexp LESS numexp .)
    )               reduce using rule 34 (compexp -> numexp LESS numexp .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39


state 69

    (35) compexp -> numexp LESSEQUALS numexp .
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

    AND             reduce using rule 35 (compexp -> numexp LESSEQUALS numexp .)
    OR              reduce using rule 35 (compexp -> numexp LESSEQUALS numexp .)
    EQUALS          reduce using rule 35 (compexp -> numexp LESSEQUALS numexp .)
    NOTEQUALS       reduce using rule 35 (compexp -> numexp LESSEQUALS numexp .)
    ;               reduce using rule 35 (compexp -> numexp LESSEQUALS numexp .)
    )               reduce using rule 35 (compexp -> numexp LESSEQUALS numexp .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39


state 70

    (36) compexp -> numexp GREATEREQUALS numexp .
    (14) numexp -> numexp . + numexp
    (15) numexp -> numexp . - numexp
    (16) numexp -> numexp . * numexp
    (17) numexp -> numexp . / numexp
    (18) numexp -> numexp . ^ numexp

    AND             reduce using rule 36 (compexp -> numexp GREATEREQUALS numexp .)
    OR              reduce using rule 36 (compexp -> numexp GREATEREQUALS numexp .)
    EQUALS          reduce using rule 36 (compexp -> numexp GREATEREQUALS numexp .)
    NOTEQUALS       reduce using rule 36 (compexp -> numexp GREATEREQUALS numexp .)
    ;               reduce using rule 36 (compexp -> numexp GREATEREQUALS numexp .)
    )               reduce using rule 36 (compexp -> numexp GREATEREQUALS numexp .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39


state 71

    (24) boolexp -> boolexp AND boolexp .
    (24) boolexp -> boolexp . AND boolexp
    (25) boolexp -> boolexp . OR boolexp
    (29) compexp -> boolexp . EQUALS boolexp
    (30) compexp -> boolexp . NOTEQUALS boolexp

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    ;               reduce using rule 24 (boolexp -> boolexp AND boolexp .)
    )               reduce using rule 24 (boolexp -> boolexp AND boolexp .)
    AND             shift and go to state 46
    OR              shift and go to state 47
    EQUALS          shift and go to state 48
    NOTEQUALS       shift and go to state 49

  ! AND             [ reduce using rule 24 (boolexp -> boolexp AND boolexp .) ]
  ! OR              [ reduce using rule 24 (boolexp -> boolexp AND boolexp .) ]
  ! EQUALS          [ reduce using rule 24 (boolexp -> boolexp AND boolexp .) ]
  ! NOTEQUALS       [ reduce using rule 24 (boolexp -> boolexp AND boolexp .) ]


state 72

    (25) boolexp -> boolexp OR boolexp .
    (24) boolexp -> boolexp . AND boolexp
    (25) boolexp -> boolexp . OR boolexp
    (29) compexp -> boolexp . EQUALS boolexp
    (30) compexp -> boolexp . NOTEQUALS boolexp

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    ;               reduce using rule 25 (boolexp -> boolexp OR boolexp .)
    )               reduce using rule 25 (boolexp -> boolexp OR boolexp .)
    AND             shift and go to state 46
    OR              shift and go to state 47
    EQUALS          shift and go to state 48
    NOTEQUALS       shift and go to state 49

  ! AND             [ reduce using rule 25 (boolexp -> boolexp OR boolexp .) ]
  ! OR              [ reduce using rule 25 (boolexp -> boolexp OR boolexp .) ]
  ! EQUALS          [ reduce using rule 25 (boolexp -> boolexp OR boolexp .) ]
  ! NOTEQUALS       [ reduce using rule 25 (boolexp -> boolexp OR boolexp .) ]


state 73

    (29) compexp -> boolexp EQUALS boolexp .
    (24) boolexp -> boolexp . AND boolexp
    (25) boolexp -> boolexp . OR boolexp
    (29) compexp -> boolexp . EQUALS boolexp
    (30) compexp -> boolexp . NOTEQUALS boolexp

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    ;               reduce using rule 29 (compexp -> boolexp EQUALS boolexp .)
    )               reduce using rule 29 (compexp -> boolexp EQUALS boolexp .)
    AND             shift and go to state 46
    OR              shift and go to state 47
    EQUALS          shift and go to state 48
    NOTEQUALS       shift and go to state 49

  ! AND             [ reduce using rule 29 (compexp -> boolexp EQUALS boolexp .) ]
  ! OR              [ reduce using rule 29 (compexp -> boolexp EQUALS boolexp .) ]
  ! EQUALS          [ reduce using rule 29 (compexp -> boolexp EQUALS boolexp .) ]
  ! NOTEQUALS       [ reduce using rule 29 (compexp -> boolexp EQUALS boolexp .) ]


state 74

    (30) compexp -> boolexp NOTEQUALS boolexp .
    (24) boolexp -> boolexp . AND boolexp
    (25) boolexp -> boolexp . OR boolexp
    (29) compexp -> boolexp . EQUALS boolexp
    (30) compexp -> boolexp . NOTEQUALS boolexp

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    ;               reduce using rule 30 (compexp -> boolexp NOTEQUALS boolexp .)
    )               reduce using rule 30 (compexp -> boolexp NOTEQUALS boolexp .)
    AND             shift and go to state 46
    OR              shift and go to state 47
    EQUALS          shift and go to state 48
    NOTEQUALS       shift and go to state 49

  ! AND             [ reduce using rule 30 (compexp -> boolexp NOTEQUALS boolexp .) ]
  ! OR              [ reduce using rule 30 (compexp -> boolexp NOTEQUALS boolexp .) ]
  ! EQUALS          [ reduce using rule 30 (compexp -> boolexp NOTEQUALS boolexp .) ]
  ! NOTEQUALS       [ reduce using rule 30 (compexp -> boolexp NOTEQUALS boolexp .) ]


state 75

    (23) boolexp -> ( boolexp . )
    (24) boolexp -> boolexp . AND boolexp
    (25) boolexp -> boolexp . OR boolexp
    (29) compexp -> boolexp . EQUALS boolexp
    (30) compexp -> boolexp . NOTEQUALS boolexp

    )               shift and go to state 59
    AND             shift and go to state 46
    OR              shift and go to state 47
    EQUALS          shift and go to state 48
    NOTEQUALS       shift and go to state 49


state 76

    (11) statement -> IF ( boolexp ) . { stmts }

    {               shift and go to state 80


state 77

    (5) statement -> INTDCL NAME = numexp ; .

    INTDCL          reduce using rule 5 (statement -> INTDCL NAME = numexp ; .)
    FLOATDCL        reduce using rule 5 (statement -> INTDCL NAME = numexp ; .)
    BOOLDCL         reduce using rule 5 (statement -> INTDCL NAME = numexp ; .)
    PRINT           reduce using rule 5 (statement -> INTDCL NAME = numexp ; .)
    IF              reduce using rule 5 (statement -> INTDCL NAME = numexp ; .)
    NAME            reduce using rule 5 (statement -> INTDCL NAME = numexp ; .)
    $end            reduce using rule 5 (statement -> INTDCL NAME = numexp ; .)
    }               reduce using rule 5 (statement -> INTDCL NAME = numexp ; .)


state 78

    (7) statement -> FLOATDCL NAME = numexp ; .

    INTDCL          reduce using rule 7 (statement -> FLOATDCL NAME = numexp ; .)
    FLOATDCL        reduce using rule 7 (statement -> FLOATDCL NAME = numexp ; .)
    BOOLDCL         reduce using rule 7 (statement -> FLOATDCL NAME = numexp ; .)
    PRINT           reduce using rule 7 (statement -> FLOATDCL NAME = numexp ; .)
    IF              reduce using rule 7 (statement -> FLOATDCL NAME = numexp ; .)
    NAME            reduce using rule 7 (statement -> FLOATDCL NAME = numexp ; .)
    $end            reduce using rule 7 (statement -> FLOATDCL NAME = numexp ; .)
    }               reduce using rule 7 (statement -> FLOATDCL NAME = numexp ; .)


state 79

    (9) statement -> BOOLDCL NAME = boolexp ; .

    INTDCL          reduce using rule 9 (statement -> BOOLDCL NAME = boolexp ; .)
    FLOATDCL        reduce using rule 9 (statement -> BOOLDCL NAME = boolexp ; .)
    BOOLDCL         reduce using rule 9 (statement -> BOOLDCL NAME = boolexp ; .)
    PRINT           reduce using rule 9 (statement -> BOOLDCL NAME = boolexp ; .)
    IF              reduce using rule 9 (statement -> BOOLDCL NAME = boolexp ; .)
    NAME            reduce using rule 9 (statement -> BOOLDCL NAME = boolexp ; .)
    $end            reduce using rule 9 (statement -> BOOLDCL NAME = boolexp ; .)
    }               reduce using rule 9 (statement -> BOOLDCL NAME = boolexp ; .)


state 80

    (11) statement -> IF ( boolexp ) { . stmts }
    (2) stmts -> . statement stmts
    (3) stmts -> . statement
    (4) statement -> . INTDCL NAME ;
    (5) statement -> . INTDCL NAME = numexp ;
    (6) statement -> . FLOATDCL NAME ;
    (7) statement -> . FLOATDCL NAME = numexp ;
    (8) statement -> . BOOLDCL NAME ;
    (9) statement -> . BOOLDCL NAME = boolexp ;
    (10) statement -> . PRINT expression ;
    (11) statement -> . IF ( boolexp ) { stmts }
    (12) statement -> . NAME = expression ;

    INTDCL          shift and go to state 4
    FLOATDCL        shift and go to state 6
    BOOLDCL         shift and go to state 7
    PRINT           shift and go to state 8
    IF              shift and go to state 9
    NAME            shift and go to state 5

    stmts                          shift and go to state 81
    statement                      shift and go to state 3

state 81

    (11) statement -> IF ( boolexp ) { stmts . }

    }               shift and go to state 82


state 82

    (11) statement -> IF ( boolexp ) { stmts } .

    INTDCL          reduce using rule 11 (statement -> IF ( boolexp ) { stmts } .)
    FLOATDCL        reduce using rule 11 (statement -> IF ( boolexp ) { stmts } .)
    BOOLDCL         reduce using rule 11 (statement -> IF ( boolexp ) { stmts } .)
    PRINT           reduce using rule 11 (statement -> IF ( boolexp ) { stmts } .)
    IF              reduce using rule 11 (statement -> IF ( boolexp ) { stmts } .)
    NAME            reduce using rule 11 (statement -> IF ( boolexp ) { stmts } .)
    $end            reduce using rule 11 (statement -> IF ( boolexp ) { stmts } .)
    }               reduce using rule 11 (statement -> IF ( boolexp ) { stmts } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 34 resolved as shift
WARNING: shift/reduce conflict for + in state 60 resolved as shift
WARNING: shift/reduce conflict for - in state 60 resolved as shift
WARNING: shift/reduce conflict for * in state 60 resolved as shift
WARNING: shift/reduce conflict for / in state 60 resolved as shift
WARNING: shift/reduce conflict for ^ in state 60 resolved as shift
WARNING: shift/reduce conflict for + in state 61 resolved as shift
WARNING: shift/reduce conflict for - in state 61 resolved as shift
WARNING: shift/reduce conflict for * in state 61 resolved as shift
WARNING: shift/reduce conflict for / in state 61 resolved as shift
WARNING: shift/reduce conflict for ^ in state 61 resolved as shift
WARNING: shift/reduce conflict for + in state 62 resolved as shift
WARNING: shift/reduce conflict for - in state 62 resolved as shift
WARNING: shift/reduce conflict for * in state 62 resolved as shift
WARNING: shift/reduce conflict for / in state 62 resolved as shift
WARNING: shift/reduce conflict for ^ in state 62 resolved as shift
WARNING: shift/reduce conflict for + in state 63 resolved as shift
WARNING: shift/reduce conflict for - in state 63 resolved as shift
WARNING: shift/reduce conflict for * in state 63 resolved as shift
WARNING: shift/reduce conflict for / in state 63 resolved as shift
WARNING: shift/reduce conflict for ^ in state 63 resolved as shift
WARNING: shift/reduce conflict for + in state 64 resolved as shift
WARNING: shift/reduce conflict for - in state 64 resolved as shift
WARNING: shift/reduce conflict for * in state 64 resolved as shift
WARNING: shift/reduce conflict for / in state 64 resolved as shift
WARNING: shift/reduce conflict for ^ in state 64 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for OR in state 71 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 71 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 72 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 73 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 73 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 74 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 74 resolved as shift
WARNING: reduce/reduce conflict in state 19 resolved using rule (boolexp -> NAME)
WARNING: rejected rule (expression -> NAME) in state 19
WARNING: Rule (expression -> NAME) is never reduced
